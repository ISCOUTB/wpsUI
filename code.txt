"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  BarChart as BarChartIcon,
  ChevronRight,
  Download,
  Users,
  LayoutDashboard,
  Settings,
  Info,
} from "lucide-react";
// Asegúrate de que estos componentes existan en tu proyecto
import { ParameterSelector } from "@/components/analytics/parameter-selector";
// ParameterChart no se usa directamente en este ejemplo, la lógica de gráfico está aquí
// import { ParameterChart } from "@/components/analytics/parameter-chart";
import { DownloadSection } from "@/components/analytics/download-section";
// Asegúrate de que este componente exista en tu proyecto
import AgentSearch from "../search/AgentSearch";

import {
  BarChart,
  LineChart,
  PieChart,
  ResponsiveContainer,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  Bar,
  Line,
  Pie,
  Cell,
  AreaChart, // Importa AreaChart
  Area, // Importa Area
  ReferenceLine, // Importa ReferenceLine
} from "recharts";

import type { ParameterType } from "@/lib/parameter-config";
import { parameters } from "@/lib/parameter-config"; // Asegúrate de que este archivo exista

// Sample data for charts
const simulationData = [
  { name: "Day 1", agents: 120, tasks: 340, efficiency: 65 },
  { name: "Day 2", agents: 145, tasks: 380, efficiency: 68 },
  { name: "Day 3", agents: 190, tasks: 420, efficiency: 72 },
  { name: "Day 4", agents: 210, tasks: 460, efficiency: 76 },
  { name: "Day 5", agents: 230, tasks: 500, efficiency: 80 },
  { name: "Day 6", agents: 240, tasks: 520, efficiency: 83 },
  { name: "Day 7", agents: 247, tasks: 540, efficiency: 87 },
  { name: "Day 8", agents: 240, tasks: 525, efficiency: 85 },
  { name: "Day 9", agents: 235, tasks: 510, efficiency: 82 },
  { name: "Day 10", agents: 220, tasks: 490, efficiency: 78 },
  { name: "Day 11", agents: 200, tasks: 450, efficiency: 75 },
  { name: "Day 12", agents: 180, tasks: 400, efficiency: 70 },
  { name: "Day 13", agents: 160, tasks: 380, efficiency: 68 },
  { name: "Day 14", agents: 155, tasks: 370, efficiency: 67 },
  { name: "Day 15", agents: 150, tasks: 360, efficiency: 65 },
  { name: "Day 16", agents: 145, tasks: 350, efficiency: 63 },
  { name: "Day 17", agents: 140, tasks: 340, efficiency: 61 },
  { name: "Day 18", agents: 135, tasks: 330, efficiency: 59 },
  { name: "Day 19", agents: 130, tasks: 320, efficiency: 57 },
  { name: "Day 20", agents: 125, tasks: 310, efficiency: 55 },
  { name: "Day 21", agents: 120, tasks: 300, efficiency: 53 },
  { name: "Day 22", agents: 115, tasks: 290, efficiency: 51 },
  { name: "Day 23", agents: 110, tasks: 280, efficiency: 49 },
  { name: "Day 24", agents: 105, tasks: 270, efficiency: 47 },
  { name: "Day 25", agents: 100, tasks: 260, efficiency: 45 },
  { name: "Day 26", agents: 95, tasks: 250, efficiency: 43 },
  { name: "Day 27", agents: 90, tasks: 240, efficiency: 41 },
  { name: "Day 28", agents: 85, tasks: 230, efficiency: 39 },
  { name: "Day 29", agents: 80, tasks: 220, efficiency: 37 },
  { name: "Day 30", agents: 75, tasks: 210, efficiency: 35 },
  { name: "Day 31", agents: 70, tasks: 200, efficiency: 33 },
];

const activityData = [
  { name: "Working", value: 183 },
  { name: "Idle", value: 42 },
  { name: "Terminated", value: 22 },
];

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"]; // Colores para la gráfica de pastel

// Definición mejorada de los elementos de navegación con mejores iconos y descripciones
const navigationItems = [
  {
    id: "home",
    label: "Dashboard",
    description: "Vista general de la simulación",
    icon: <LayoutDashboard className="w-5 h-5" />,
  },
  {
    id: "parameter",
    label: "Parameters",
    description: "Análisis detallado de parámetros",
    icon: <BarChartIcon className="w-5 h-5" />,
  },
  {
    id: "agents",
    label: "Agents",
    description: "Estado actual de los agentes",
    icon: <Users className="w-5 h-5" />,
  },
  {
    id: "download",
    label: "Data Export",
    description: "Exportar datos para análisis",
    icon: <Download className="w-5 h-5" />,
  },
];

export default function Analytics() {
  const [selectedType, setSelectedType] = useState<ParameterType>("integer");
  const [selectedParameter, setSelectedParameter] = useState("currentActivity");
  const [activeSection, setActiveSection] = useState("home");
  const [isMobile, setIsMobile] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const router = useRouter();

  // Detección de dispositivo móvil y manejo del sidebar
  useEffect(() => {
    const checkMobile = () => {
      const isMobileView = window.innerWidth < 768;
      setIsMobile(isMobileView);
      setSidebarOpen(!isMobileView); // Cierra por defecto en móvil, abre en escritorio
    };

    checkMobile();
    window.addEventListener("resize", checkMobile);

    return () => window.removeEventListener("resize", checkMobile);
  }, []);

  // Datos de ejemplo para gráficos de parámetros
  const getParameterData = () => {
    const dataPoints = 30;
    switch (selectedParameter) {
      case "currentActivity":
        return [
          { name: "Working", value: 183 },
          { name: "Eating", value: 37 },
          { name: "Sleeping", value: 20 },
          { name: "Socializing", value: 42 },
          { name: "Learning", value: 15 },
        ];
      case "happiness":
        return Array.from({ length: dataPoints }, (_, i) => ({
          name: `Agent ${i + 1}`,
          value: Math.floor(Math.random() * 100), // Valor aleatorio 0-99
        }));
      case "age": // Ejemplo para un parámetro de tipo 'integer'
        return Array.from({ length: dataPoints }, (_, i) => ({
          name: `Agent ${i + 1}`,
          value: 20 + Math.floor(Math.random() * 40), // Edad entre 20 y 60
        }));
      // Agrega más casos según tus parámetros definidos en parameters.ts
      default:
        // Datos por defecto si el parámetro no coincide
        return Array.from({ length: dataPoints }, (_, i) => ({
          name: `Data ${i + 1}`,
          value: Math.floor(Math.random() * 100),
        }));
    }
  };

  // Función para manejar el cambio de tipo de parámetro
  const handleTypeChange = (type: string) => {
    setSelectedType(type as ParameterType);
    // Asegúrate de que parameters[type] y parameters[type][0] existan
    const firstParameter = parameters[type as ParameterType]?.[0]?.key || "";
    setSelectedParameter(firstParameter);
  };

  // Alterna la visibilidad del sidebar (usado en móvil)
  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  // Calcula el promedio de eficiencia para la ReferenceLine
  const averageEfficiency =
    simulationData.reduce((sum, entry) => sum + entry.efficiency, 0) /
    simulationData.length;

  return (
    // Asegúrate de que el contenedor principal use clases para el tema oscuro si es necesario
    <div className="flex h-screen bg-background overflow-hidden dark:bg-gray-900 dark:text-white">
      {/* Sidebar mejorado con animaciones y mejor estructura */}
      <div
        className={`analytics-sidebar transition-all duration-300 ease-in-out ${
          sidebarOpen ? "w-64" : "w-0 md:w-16"
        } bg-card border-r border-border h-full flex flex-col flex-shrink-0 ${
          !sidebarOpen && isMobile ? "hidden" : ""
        } dark:bg-gray-800 dark:border-gray-700`}
      >
        {/* Encabezado del Sidebar */}
        <div className="p-4 flex items-center justify-between border-b border-border dark:border-gray-700">
          {/* Título del sidebar, ahora blanco en dark mode */}
          <h2
            className={`font-semibold text-lg transition-opacity duration-300 text-foreground dark:text-white ${sidebarOpen ? "opacity-100" : "opacity-0 md:opacity-100"}`}
          >
            Analytics
          </h2>
          {/* Botón para alternar sidebar en móvil */}
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden dark:text-gray-300 dark:hover:bg-gray-700"
            onClick={toggleSidebar}
          >
            <ChevronRight
              className={`h-5 w-5 transition-transform ${sidebarOpen ? "" : "rotate-180"}`}
            />
          </Button>
        </div>

        {/* Elementos de Navegación */}
        <div className="flex-1 py-4 overflow-y-auto">
          <nav className="space-y-1 px-2">
            {navigationItems.map((item) => (
              <button
                key={item.id}
                onClick={() => {
                  setActiveSection(item.id);
                  if (isMobile) setSidebarOpen(false);
                }}
                className={`w-full flex items-center px-3 py-3 rounded-md transition-all duration-200 hover:bg-muted/80 group ${
                  activeSection === item.id
                    ? "bg-primary/10 text-primary shadow-sm dark:bg-blue-500/20 dark:text-blue-300" // Estilo activo en dark mode
                    : "text-muted-foreground dark:text-gray-400" // Estilo inactivo en dark mode
                }`}
              >
                <span className="flex-shrink-0 group-hover:text-foreground dark:group-hover:text-white">
                  {item.icon}
                </span>
                <div
                  className={`ml-3 flex flex-col transition-opacity duration-300 ${sidebarOpen ? "opacity-100" : "opacity-0 md:opacity-100"}`}
                >
                  <span className="text-sm font-medium text-left text-foreground dark:text-white">
                    {item.label}
                  </span>
                  <span className="text-xs opacity-70 truncate text-left text-muted-foreground dark:text-gray-400">
                    {item.description}
                  </span>
                </div>
              </button>
            ))}
          </nav>
        </div>

        {/* Botón de "Ir al Simulador" */}
        <div
          className={`mt-auto p-4 border-t border-border transition-opacity duration-300 ${sidebarOpen ? "opacity-100" : "opacity-0"} dark:border-gray-700`}
        >
          <Button
            variant="outline"
            size="sm"
            className="w-full flex items-center justify-center gap-2 dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
            onClick={() => router.push("/pages/simulador")}
          >
            <Settings className="w-4 h-4" />
            <span>Simulador</span>
          </Button>
        </div>
      </div>

      {/* Contenido principal mejorado */}
      <div className="flex-1 flex flex-col h-full overflow-hidden">
        {/* Header con información contextual */}
        <header className="bg-background border-b border-border p-4 flex justify-between items-center flex-shrink-0 dark:bg-gray-900 dark:border-gray-700">
          <div>
            <h1 className="text-xl font-semibold text-foreground dark:text-white">
              {navigationItems.find((item) => item.id === activeSection)?.label}
            </h1>
            <p className="text-sm text-muted-foreground dark:text-gray-400">
              {
                navigationItems.find((item) => item.id === activeSection)
                  ?.description
              }
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="icon"
              className="dark:text-gray-300 dark:hover:bg-gray-700"
            >
              <Info className="h-5 w-5" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.push("/pages/simulador")}
              className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              Go to Simulator
            </Button>
          </div>
        </header>

        {/* Área de Contenido Principal (con scroll) */}
        <main className="flex-1 overflow-y-auto p-6 dark:bg-gray-950">
          <div className="container mx-auto max-w-6xl">
            {/* Dashboard / Home */}
            {activeSection === "home" && (
              <div className="animate-fadeIn space-y-6">
                {/* Estadísticas rápidas arriba */}
                <div className="grid md:grid-cols-3 gap-4">
                  {/* Card for Quick Stats */}
                  <Card className="col-span-3 md:col-span-1 dark:bg-gray-800 dark:border-gray-700">
                    <CardHeader className="pb-2">
                      <CardTitle className="dark:text-white">
                        Quick Stats
                      </CardTitle>
                      <CardDescription className="dark:text-gray-400">
                        Key performance metrics
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div className="bg-muted/40 p-4 rounded-lg dark:bg-gray-700/40">
                          <p className="text-sm text-muted-foreground dark:text-gray-400">
                            Active Agents
                          </p>
                          <h3 className="text-2xl font-bold dark:text-white">
                            247
                          </h3>{" "}
                          {/* Example value */}
                          <p className="text-xs text-muted-foreground dark:text-gray-500">
                            Last count
                          </p>
                        </div>
                        <div className="bg-muted/40 p-4 rounded-lg dark:bg-gray-700/40">
                          <p className="text-sm text-muted-foreground dark:text-gray-400">
                            Average Efficiency
                          </p>
                          <h3 className="text-2xl font-bold dark:text-white">
                            {averageEfficiency.toFixed(1)}%
                          </h3>{" "}
                          {/* Display calculated average */}
                          <p className="text-xs text-muted-foreground dark:text-gray-500">
                            Overall mean
                          </p>
                        </div>
                        <div className="bg-muted/40 p-4 rounded-lg dark:bg-gray-700/40">
                          <p className="text-sm text-muted-foreground dark:text-gray-400">
                            Total Iterations
                          </p>
                          <h3 className="text-2xl font-bold dark:text-white">
                            1,893
                          </h3>{" "}
                          {/* Example value */}
                          <p className="text-xs text-muted-foreground dark:text-gray-500">
                            Completed
                          </p>
                        </div>
                        <div className="bg-muted/40 p-4 rounded-lg dark:bg-gray-700/40">
                          <p className="text-sm text-muted-foreground dark:text-gray-400">
                            Total Runtime
                          </p>
                          <h3 className="text-2xl font-bold dark:text-white">
                            4.3h
                          </h3>{" "}
                          {/* Example value */}
                          <p className="text-xs text-muted-foreground dark:text-gray-500">
                            Since start
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Card for Simulation Overview Chart */}
                  <Card className="md:col-span-2 dark:bg-gray-800 dark:border-gray-700">
                    <CardHeader className="pb-2">
                      <CardTitle className="dark:text-white">
                        Simulation Efficiency Over Time
                      </CardTitle>{" "}
                      {/* Título más específico */}
                      <CardDescription className="dark:text-gray-400">
                        Efficiency metrics over simulation days
                      </CardDescription>{" "}
                      {/* Descripción más específica */}
                    </CardHeader>
                    <CardContent className="pt-0">
                      {/* Gráfico de Área con estilo de la imagen */}
                      <div className="h-80 w-full">
                        <ResponsiveContainer width="100%" height="100%">
                          {/* Usamos AreaChart para el área rellena */}
                          <AreaChart
                            data={simulationData}
                            margin={{
                              top: 10,
                              right: 30,
                              left: 0,
                              bottom: 0,
                            }}
                          >
                            {/* Personaliza el fondo de la cuadrícula para un tema oscuro */}
                            {/* Desactivamos las líneas verticales y hacemos las horizontales sutiles */}
                            <CartesianGrid
                              strokeDasharray="3 3"
                              stroke="#333"
                              vertical={false}
                            />
                            {/* Eje X estilizado para tema oscuro */}
                            <XAxis dataKey="name" stroke="#888" />
                            {/* Eje Y estilizado para tema oscuro, ajustando el dominio si es necesario */}
                            {/* El dominio [30, 90] se basa en la imagen de ejemplo */}
                            <YAxis stroke="#888" domain={[30, 90]} />
                            {/* Tooltip con estilo por defecto de recharts se adapta al tema */}
                            <Tooltip
                              contentStyle={{
                                backgroundColor: "#333",
                                border: "none",
                                color: "#fff",
                              }} // Estilo básico para el tooltip en dark mode
                              labelStyle={{ color: "#ddd" }} // Estilo para la etiqueta del tooltip
                              itemStyle={{ color: "#fff" }} // Estilo para los ítems del tooltip
                            />
                            {/* Legend para identificar la línea */}
                            <Legend wrapperStyle={{ color: "#ccc" }} />{" "}
                            {/* Estilo para el texto de la leyenda */}
                            {/* Define un gradiente para el área si quieres ese efecto */}
                            {/* Los colores deben coincidir con el stroke de la línea */}
                            <defs>
                              <linearGradient
                                id="colorEfficiencyArea"
                                x1="0"
                                y1="0"
                                x2="0"
                                y2="1"
                              >
                                <stop
                                  offset="5%"
                                  stopColor="#8884d8"
                                  stopOpacity={0.8}
                                />
                                <stop
                                  offset="95%"
                                  stopColor="#8884d8"
                                  stopOpacity={0}
                                />
                              </linearGradient>
                            </defs>
                            {/* Línea y área para la eficiencia */}
                            <Area
                              type="monotone" // Tipo de curva suave
                              dataKey="efficiency" // Datos a mostrar
                              stroke="#8884d8" // Color de la línea (ej. azul/púrpura)
                              fillOpacity={1} // Opacidad del relleno
                              fill="url(#colorEfficiencyArea)" // Usa el gradiente para el relleno
                              strokeWidth={2} // Grosor de la línea
                              dot={false} // No mostrar puntos individuales en la línea
                              // activeDot={{ r: 5, stroke: '#8884d8', fill: '#8884d8' }} // Opcional: punto al pasar el ratón
                            />
                            {/* Agrega una línea de referencia para el promedio */}
                            <ReferenceLine
                              y={averageEfficiency} // Usa el promedio calculado
                              stroke="red" // Color de la línea promedio
                              strokeDasharray="3 3" // Estilo de línea punteada
                              // label con estilo para dark mode
                              label={{
                                value: `Average: ${averageEfficiency.toFixed(1)}%`,
                                position: "right",
                                fill: "red",
                                fontSize: 12,
                              }}
                            />
                          </AreaChart>
                        </ResponsiveContainer>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card className="dark:bg-gray-800 dark:border-gray-700">
                  <CardHeader>
                    <CardTitle className="dark:text-white">
                      Simulation Details
                    </CardTitle>
                    <CardDescription className="dark:text-gray-400">
                      Comprehensive information about the current simulation
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <p className="dark:text-gray-300">
                        This dashboard provides an overview of the simulation
                        data. Here, you can see aggregated metrics, summary
                        charts, and key performance indicators that provide
                        insights into the overall behavior and progress of the
                        simulation.
                      </p>
                      <p className="dark:text-gray-300">
                        Use the navigation panel on the left to explore
                        different aspects of the simulation data. You can:
                      </p>
                      <ul className="list-disc pl-5 space-y-1 dark:text-gray-300">
                        <li>View detailed parameter analysis</li>
                        <li>Check individual agent status and activities</li>
                        <li>
                          Download raw or processed data for further analysis
                        </li>
                      </ul>
                    </div>
                  </CardContent>
                  <CardFooter className="border-t border-border pt-4 flex justify-end dark:border-gray-700">
                    <Button
                      onClick={() => setActiveSection("parameter")}
                      className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
                    >
                      View Parameters
                      <ChevronRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            )}

            {/* Parameter Analysis */}
            {activeSection === "parameter" && (
              <div className="animate-fadeIn space-y-6">
                <Card className="dark:bg-gray-800 dark:border-gray-700">
                  <CardHeader>
                    <CardTitle className="dark:text-white">
                      Parameter Analysis
                    </CardTitle>
                    <CardDescription className="dark:text-gray-400">
                      Explore and analyze simulation parameters in detail
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Tabs defaultValue="visualization" className="w-full">
                      <TabsList className="grid w-full grid-cols-2 mb-6 dark:bg-gray-700 dark:text-gray-300">
                        <TabsTrigger
                          value="visualization"
                          className="dark:data-[state=active]:bg-gray-900 dark:data-[state=active]:text-white"
                        >
                          Visualization
                        </TabsTrigger>
                        <TabsTrigger
                          value="configuration"
                          className="dark:data-[state=active]:bg-gray-900 dark:data-[state=active]:text-white"
                        >
                          Configuration
                        </TabsTrigger>
                      </TabsList>

                      <TabsContent value="visualization" className="space-y-4">
                        <div className="bg-muted/30 p-4 rounded-lg dark:bg-gray-700/30">
                          {/* Parameter Selector Component */}
                          <ParameterSelector
                            selectedType={selectedType}
                            selectedParameter={selectedParameter}
                            onTypeChange={handleTypeChange}
                            onParameterChange={setSelectedParameter}
                          />
                        </div>

                        {/* Enhanced Chart Display Box */}
                        <div className="bg-card border border-border rounded-lg p-6 dark:bg-gray-800 dark:border-gray-700">
                          {/* Parameter Title and Description */}
                          <div className="mb-4">
                            <h3 className="text-lg font-medium dark:text-white">
                              {selectedParameter}
                            </h3>
                            <p className="text-sm text-muted-foreground dark:text-gray-400">
                              {selectedType === "integer"
                                ? "Distribution of integer values across agents"
                                : selectedParameter === "currentActivity"
                                  ? "Activity breakdown of all agents"
                                  : "Trend analysis of parameter values"}
                            </p>
                          </div>

                          {/* Parameter Statistics Bar */}
                          <div className="grid grid-cols-3 gap-4 mb-6">
                            <div className="bg-muted/40 p-3 rounded-lg dark:bg-gray-700/40">
                              <p className="text-xs text-muted-foreground dark:text-gray-400">
                                Average
                              </p>
                              <h4 className="text-xl font-bold dark:text-white">
                                {selectedType === "integer"
                                  ? (
                                      getParameterData().reduce(
                                        (sum, item) => sum + item.value,
                                        0
                                      ) / getParameterData().length
                                    ).toFixed(1)
                                  : "N/A"}
                              </h4>
                            </div>
                            <div className="bg-muted/40 p-3 rounded-lg dark:bg-gray-700/40">
                              <p className="text-xs text-muted-foreground dark:text-gray-400">
                                Maximum
                              </p>
                              <h4 className="text-xl font-bold dark:text-white">
                                {selectedType === "integer"
                                  ? Math.max(
                                      ...getParameterData().map(
                                        (item) => item.value
                                      )
                                    )
                                  : "N/A"}
                              </h4>
                            </div>
                            <div className="bg-muted/40 p-3 rounded-lg dark:bg-gray-700/40">
                              <p className="text-xs text-muted-foreground dark:text-gray-400">
                                Sample Size
                              </p>
                              <h4 className="text-xl font-bold dark:text-white">
                                {getParameterData().length}
                              </h4>
                            </div>
                          </div>

                          {/* Chart Container */}
                          <div className="h-96 w-full">
                            <ResponsiveContainer width="100%" height="100%">
                              {/* Updated Chart Components */}
                              {selectedType === "integer" ? (
                                <BarChart
                                  data={getParameterData()}
                                  margin={{
                                    top: 20,
                                    right: 30,
                                    left: 0,
                                    bottom: 20,
                                  }}
                                >
                                  {/* Definir gradientes para barras */}
                                  <defs>
                                    <linearGradient
                                      id="barGradient"
                                      x1="0"
                                      y1="0"
                                      x2="0"
                                      y2="1"
                                    >
                                      <stop
                                        offset="5%"
                                        stopColor="#8884d8"
                                        stopOpacity={0.9}
                                      />
                                      <stop
                                        offset="95%"
                                        stopColor="#8884d8"
                                        stopOpacity={0.6}
                                      />
                                    </linearGradient>
                                  </defs>
                                  <CartesianGrid
                                    strokeDasharray="3 3"
                                    stroke="#333"
                                    opacity={0.5}
                                    vertical={false}
                                  />
                                  <XAxis
                                    dataKey="name"
                                    stroke="#888"
                                    fontSize={12}
                                    tickMargin={10}
                                    axisLine={{ stroke: "#333" }}
                                    tickLine={{ stroke: "#333" }}
                                  />
                                  <YAxis
                                    stroke="#888"
                                    fontSize={12}
                                    axisLine={{ stroke: "#333" }}
                                    tickLine={{ stroke: "#333" }}
                                    tickFormatter={(value) => `${value}`}
                                  />
                                  <Tooltip
                                    cursor={{
                                      fill: "rgba(255, 255, 255, 0.05)",
                                    }}
                                    contentStyle={{
                                      backgroundColor: "#1f2937",
                                      border: "1px solid #374151",
                                      borderRadius: "6px",
                                      boxShadow:
                                        "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                                      color: "#fff",
                                    }}
                                    labelStyle={{
                                      color: "#ddd",
                                      fontWeight: "bold",
                                      marginBottom: "4px",
                                    }}
                                    itemStyle={{
                                      color: "#fff",
                                      padding: "2px 0",
                                    }}
                                  />
                                  <Legend
                                    wrapperStyle={{
                                      color: "#ccc",
                                      fontSize: "12px",
                                      paddingTop: "10px",
                                    }}
                                    iconType="circle"
                                  />
                                  <Bar
                                    dataKey="value"
                                    fill="url(#barGradient)"
                                    radius={[4, 4, 0, 0]}
                                    barSize={30}
                                    animationDuration={1500}
                                    name="Parameter Value"
                                  />
                                </BarChart>
                              ) : selectedParameter === "currentActivity" ? (
                                // Para tipos categóricos como "currentActivity", usa PieChart como en la imagen de ejemplo
                                <PieChart>
                                  <Pie
                                    data={getParameterData()}
                                    cx="50%"
                                    cy="50%"
                                    labelLine={false}
                                    outerRadius={130}
                                    innerRadius={80} // Donut chart como en la imagen
                                    dataKey="value"
                                    nameKey="name"
                                    paddingAngle={2}
                                    label={({ name, percent }) =>
                                      `${name}: ${(percent * 100).toFixed(0)}%`
                                    }
                                  >
                                    {getParameterData().map((entry, index) => (
                                      <Cell
                                        key={`cell-${index}`}
                                        fill={COLORS[index % COLORS.length]}
                                        stroke="rgba(0,0,0,0.1)"
                                        strokeWidth={1}
                                      />
                                    ))}
                                  </Pie>
                                  <Tooltip
                                    contentStyle={{
                                      backgroundColor: "#1f2937",
                                      border: "1px solid #374151",
                                      borderRadius: "6px",
                                      boxShadow:
                                        "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                                      color: "#fff",
                                    }}
                                    formatter={(value, name) => [
                                      `${value}`,
                                      name,
                                    ]}
                                  />
                                  <Legend
                                    layout="horizontal"
                                    verticalAlign="bottom"
                                    align="center"
                                    wrapperStyle={{
                                      color: "#ccc",
                                      fontSize: "12px",
                                      paddingTop: "20px",
                                    }}
                                  />
                                </PieChart>
                              ) : (
                                // LineChart con estilo mejorado para otros tipos de parámetros
                                <LineChart
                                  data={getParameterData()}
                                  margin={{
                                    top: 20,
                                    right: 30,
                                    left: 0,
                                    bottom: 20,
                                  }}
                                >
                                  {/* Definir gradientes para área debajo de la línea */}
                                  <defs>
                                    <linearGradient
                                      id="lineGradient"
                                      x1="0"
                                      y1="0"
                                      x2="0"
                                      y2="1"
                                    >
                                      <stop
                                        offset="5%"
                                        stopColor="#82ca9d"
                                        stopOpacity={0.8}
                                      />
                                      <stop
                                        offset="95%"
                                        stopColor="#82ca9d"
                                        stopOpacity={0.1}
                                      />
                                    </linearGradient>
                                  </defs>
                                  <CartesianGrid
                                    strokeDasharray="3 3"
                                    stroke="#333"
                                    opacity={0.5}
                                    vertical={false}
                                  />
                                  <XAxis
                                    dataKey="name"
                                    stroke="#888"
                                    fontSize={12}
                                    tickMargin={10}
                                    axisLine={{ stroke: "#333" }}
                                    tickLine={{ stroke: "#333" }}
                                  />
                                  <YAxis
                                    stroke="#888"
                                    fontSize={12}
                                    axisLine={{ stroke: "#333" }}
                                    tickLine={{ stroke: "#333" }}
                                    tickFormatter={(value) => `${value}`}
                                  />
                                  <Tooltip
                                    cursor={{
                                      stroke: "#666",
                                      strokeWidth: 1,
                                      strokeDasharray: "3 3",
                                    }}
                                    contentStyle={{
                                      backgroundColor: "#1f2937",
                                      border: "1px solid #374151",
                                      borderRadius: "6px",
                                      boxShadow:
                                        "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                                      color: "#fff",
                                    }}
                                    labelStyle={{
                                      color: "#ddd",
                                      fontWeight: "bold",
                                      marginBottom: "4px",
                                    }}
                                    itemStyle={{
                                      color: "#fff",
                                      padding: "2px 0",
                                    }}
                                  />
                                  <Legend
                                    wrapperStyle={{
                                      color: "#ccc",
                                      fontSize: "12px",
                                      paddingTop: "10px",
                                    }}
                                    iconType="circle"
                                  />
                                  <Area
                                    type="monotone"
                                    dataKey="value"
                                    stroke="#82ca9d"
                                    strokeWidth={2}
                                    fill="url(#lineGradient)"
                                    dot={{
                                      r: 4,
                                      fill: "#82ca9d",
                                      stroke: "#82ca9d",
                                      strokeWidth: 1,
                                    }}
                                    activeDot={{
                                      r: 6,
                                      stroke: "#FFF",
                                      strokeWidth: 2,
                                    }}
                                    name="Parameter Value"
                                    animationDuration={1500}
                                  />
                                </LineChart>
                              )}
                            </ResponsiveContainer>
                          </div>
                        </div>
                      </TabsContent>

                      <TabsContent value="configuration">
                        <div className="bg-muted/30 p-4 rounded-lg dark:bg-gray-700/30">
                          <h3 className="text-lg font-medium mb-4 dark:text-white">
                            Parameter Configuration
                          </h3>
                          <p className="mb-4 dark:text-gray-300">
                            Configure how parameters are displayed and analyzed
                            in the charts.
                          </p>
                          <div className="grid md:grid-cols-2 gap-4">
                            <div className="border border-border rounded-lg p-4 dark:border-gray-700 dark:bg-gray-800">
                              <h4 className="font-medium mb-2 dark:text-white">
                                Display Options
                              </h4>
                              <p className="text-sm text-muted-foreground dark:text-gray-400">
                                Configure chart display options and
                                visualization preferences.
                              </p>
                              {/* Chart Display Options Controls */}
                              <div className="mt-4 space-y-3">
                                <div className="flex items-center justify-between">
                                  <label className="text-sm dark:text-gray-300">
                                    Show Data Points
                                  </label>
                                  <div className="h-4 w-8 bg-gray-700 rounded-full relative">
                                    <div className="h-4 w-4 bg-blue-500 rounded-full absolute right-0"></div>
                                  </div>
                                </div>
                                <div className="flex items-center justify-between">
                                  <label className="text-sm dark:text-gray-300">
                                    Show Grid Lines
                                  </label>
                                  <div className="h-4 w-8 bg-gray-700 rounded-full relative">
                                    <div className="h-4 w-4 bg-blue-500 rounded-full absolute right-0"></div>
                                  </div>
                                </div>
                                <div className="flex items-center justify-between">
                                  <label className="text-sm dark:text-gray-300">
                                    Use Animations
                                  </label>
                                  <div className="h-4 w-8 bg-gray-700 rounded-full relative">
                                    <div className="h-4 w-4 bg-blue-500 rounded-full absolute right-0"></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div className="border border-border rounded-lg p-4 dark:border-gray-700 dark:bg-gray-800">
                              <h4 className="font-medium mb-2 dark:text-white">
                                Analysis Mode
                              </h4>
                              <p className="text-sm text-muted-foreground dark:text-gray-400">
                                Select different analysis methods for parameter
                                evaluation.
                              </p>
                              {/* Analysis Mode Controls */}
                              <div className="mt-4 space-y-3">
                                <div className="flex flex-col space-y-2">
                                  <label className="text-sm dark:text-gray-300">
                                    Chart Type
                                  </label>
                                  <select className="h-9 rounded-md border border-gray-700 bg-gray-800 px-3 py-1 text-sm text-white">
                                    <option>Bar Chart</option>
                                    <option>Line Chart</option>
                                    <option>Pie Chart</option>
                                    <option>Area Chart</option>
                                  </select>
                                </div>
                                <div className="flex flex-col space-y-2">
                                  <label className="text-sm dark:text-gray-300">
                                    Group By
                                  </label>
                                  <select className="h-9 rounded-md border border-gray-700 bg-gray-800 px-3 py-1 text-sm text-white">
                                    <option>None</option>
                                    <option>Age</option>
                                    <option>Gender</option>
                                    <option>Location</option>
                                  </select>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </TabsContent>
                    </Tabs>
                  </CardContent>
                  <CardFooter className="border-t border-border pt-4 flex justify-between dark:border-gray-700">
                    <Button
                      variant="outline"
                      onClick={() => setActiveSection("home")}
                      className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
                    >
                      Back to Dashboard
                    </Button>
                    <Button
                      onClick={() => setActiveSection("agents")}
                      className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
                    >
                      View Agents
                      <ChevronRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            )}

            {/* Agents Section */}
            {activeSection === "agents" && (
              <div className="animate-fadeIn space-y-6">
                <Card className="dark:bg-gray-800 dark:border-gray-700">
                  <CardHeader>
                    <CardTitle className="dark:text-white">
                      Agent Management
                    </CardTitle>
                    <CardDescription className="dark:text-gray-400">
                      View and analyze individual agent status and behavior
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="bg-muted/30 p-4 rounded-lg dark:bg-gray-700/30">
                      <h3 className="text-lg font-medium mb-2 dark:text-white">
                        Agent Filter
                      </h3>
                      <p className="mb-4 dark:text-gray-300">
                        Search and filter agents based on their properties,
                        status, and activities.
                      </p>
                      {/* Asegúrate de que AgentSearch se vea bien en dark mode */}
                      <AgentSearch />
                    </div>

                    <div>
                      <h3 className="text-lg font-medium mb-4 dark:text-white">
                        Agent Activity Summary
                      </h3>
                      <div className="grid md:grid-cols-2 gap-4">
                        {/* Stats */}
                        <div className="bg-muted/40 p-4 rounded-lg dark:bg-gray-700/40 md:col-span-1">
                          <div className="grid md:grid-cols-3 gap-4">
                            <div className="md:col-span-3">
                              <p className="text-sm text-muted-foreground dark:text-gray-400 mb-2">
                                Agent Status Distribution
                              </p>
                            </div>
                            <div className="md:col-span-1">
                              <p className="text-sm text-muted-foreground dark:text-gray-400">
                                Active
                              </p>
                              <h3 className="text-2xl font-bold dark:text-white">
                                {activityData.find((d) => d.name === "Working")
                                  ?.value || 0}
                              </h3>
                              <p className="text-xs text-muted-foreground mt-1 dark:text-gray-500">
                                {/* Calcula el porcentaje si es posible */}
                                {(
                                  ((activityData.find(
                                    (d) => d.name === "Working"
                                  )?.value || 0) /
                                    activityData.reduce(
                                      (sum, d) => sum + d.value,
                                      0
                                    )) *
                                  100
                                ).toFixed(0)}
                                % of total
                              </p>
                            </div>
                            <div className="md:col-span-1">
                              <p className="text-sm text-muted-foreground dark:text-gray-400">
                                Idle
                              </p>
                              <h3 className="text-2xl font-bold dark:text-white">
                                {activityData.find((d) => d.name === "Idle")
                                  ?.value || 0}
                              </h3>
                              <p className="text-xs text-muted-foreground mt-1 dark:text-gray-500">
                                {(
                                  ((activityData.find((d) => d.name === "Idle")
                                    ?.value || 0) /
                                    activityData.reduce(
                                      (sum, d) => sum + d.value,
                                      0
                                    )) *
                                  100
                                ).toFixed(0)}
                                % of total
                              </p>
                            </div>
                            <div className="md:col-span-1">
                              <p className="text-sm text-muted-foreground dark:text-gray-400">
                                Terminated
                              </p>
                              <h3 className="text-2xl font-bold dark:text-white">
                                {activityData.find(
                                  (d) => d.name === "Terminated"
                                )?.value || 0}
                              </h3>
                              <p className="text-xs text-muted-foreground mt-1 dark:text-gray-500">
                                {(
                                  ((activityData.find(
                                    (d) => d.name === "Terminated"
                                  )?.value || 0) /
                                    activityData.reduce(
                                      (sum, d) => sum + d.value,
                                      0
                                    )) *
                                  100
                                ).toFixed(0)}
                                % of total
                              </p>
                            </div>
                          </div>
                        </div>
                        {/* Pie Chart */}
                        <div className="bg-muted/40 p-4 rounded-lg dark:bg-gray-700/40 md:col-span-1">
                          <p className="text-sm text-muted-foreground dark:text-gray-400 mb-2">
                            Agent Status Visualization
                          </p>
                          <div className="h-64 w-full">
                            <ResponsiveContainer width="100%" height="100%">
                              <PieChart>
                                <Pie
                                  data={activityData}
                                  cx="50%"
                                  cy="50%"
                                  labelLine={false}
                                  outerRadius={80}
                                  // fill="#8884d8" // El fill de la Pie se define en las Cells
                                  dataKey="value"
                                  label={({ name, percent }) =>
                                    `${name}: ${(percent * 100).toFixed(0)}%`
                                  }
                                >
                                  {/* Asegúrate de que los colores se vean bien en dark mode */}
                                  {activityData.map((entry, index) => (
                                    <Cell
                                      key={`cell-${index}`}
                                      fill={COLORS[index % COLORS.length]}
                                    />
                                  ))}
                                </Pie>
                                {/* Tooltip con estilo para dark mode */}
                                <Tooltip
                                  contentStyle={{
                                    backgroundColor: "#333",
                                    border: "none",
                                    color: "#fff",
                                  }}
                                  labelStyle={{ color: "#ddd" }}
                                  itemStyle={{ color: "#fff" }}
                                />
                                <Legend wrapperStyle={{ color: "#ccc" }} />
                              </PieChart>
                            </ResponsiveContainer>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="border-t border-border pt-4 flex justify-between dark:border-gray-700">
                    <Button
                      variant="outline"
                      onClick={() => setActiveSection("parameter")}
                      className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
                    >
                      Back to Parameters
                    </Button>
                    <Button
                      onClick={() => setActiveSection("download")}
                      className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
                    >
                      Export Data
                      <ChevronRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            )}

            {/* Download Section */}
            {activeSection === "download" && (
              <div className="animate-fadeIn space-y-6">
                <Card className="dark:bg-gray-800 dark:border-gray-700">
                  <CardHeader>
                    <CardTitle className="dark:text-white">
                      Data Export
                    </CardTitle>
                    <CardDescription className="dark:text-gray-400">
                      Download and export simulation data for external analysis
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div className="bg-muted/30 p-4 rounded-lg dark:bg-gray-700/30">
                        <h3 className="text-lg font-medium mb-2 dark:text-white">
                          Export Options
                        </h3>
                        <p className="mb-4 dark:text-gray-300">
                          Select the data format and parameters you want to
                          export.
                        </p>
                        {/* Asegúrate de que DownloadSection se vea bien en dark mode */}
                        <DownloadSection />
                      </div>

                      <div>
                        <h3 className="text-lg font-medium mb-4 dark:text-white">
                          Recent Exports
                        </h3>
                        <div className="border border-border rounded-lg overflow-hidden dark:border-gray-700 dark:bg-gray-800">
                          <table className="w-full">
                            <thead className="bg-muted/50 dark:bg-gray-700">
                              <tr>
                                <th className="text-left p-3 text-sm font-semibold text-muted-foreground dark:text-white">
                                  Filename
                                </th>
                                <th className="text-left p-3 text-sm font-semibold text-muted-foreground dark:text-white">
                                  Size
                                </th>
                                <th className="text-left p-3 text-sm font-semibold text-muted-foreground dark:text-white">
                                  Date
                                </th>
                                <th className="text-right p-3 text-sm font-semibold text-muted-foreground dark:text-white">
                                  Action
                                </th>
                              </tr>
                            </thead>
                            <tbody className="divide-y divide-border dark:divide-gray-700 text-sm dark:text-gray-300">
                              {/* Datos de ejemplo de la tabla */}
                              <tr>
                                <td className="p-3">
                                  simulation_full_data.csv
                                </td>
                                <td className="p-3">4.2 MB</td>
                                <td className="p-3">2025-05-06</td>
                                <td className="p-3 text-right">
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    className="dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                                  >
                                    <Download className="h-4 w-4" />
                                  </Button>
                                </td>
                              </tr>
                              <tr>
                                <td className="p-3">agent_activities.json</td>
                                <td className="p-3">1.8 MB</td>
                                <td className="p-3">2025-05-05</td>
                                <td className="p-3 text-right">
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    className="dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                                  >
                                    <Download className="h-4 w-4" />
                                  </Button>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="border-t border-border pt-4 flex justify-between dark:border-gray-700">
                    <Button
                      variant="outline"
                      onClick={() => setActiveSection("agents")}
                      className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
                    >
                      Back to Agents
                    </Button>
                    <Button
                      onClick={() => setActiveSection("home")}
                      className="dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:hover:text-white"
                    >
                      Return to Dashboard
                      <ChevronRight className="ml-2 h-4 w-4" />
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            )}
          </div>
        </main>

        {/* Footer */}
        <footer className="bg-background border-t border-border p-4 flex-shrink-0 dark:bg-gray-900 dark:border-gray-700">
          <div className="container mx-auto max-w-6xl flex justify-between items-center">
            <p className="text-sm text-muted-foreground dark:text-gray-400">
              Simulation Analytics Dashboard • {new Date().toLocaleDateString()}
            </p>
            <p className="text-sm text-muted-foreground dark:text-gray-400">
              v1.0.3
            </p>
          </div>
        </footer>
      </div>
    </div>
  );
}
